{"version":3,"file":"343.e8f96f8b2b99eeea.js","mappings":"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","names":["i0","ctx_r0","htmlFormInputConfigArgsDef","form","get","InvoicesComponent","constructor","formBuilder","dataService","changeDetector","notificationService","localStorageService","this","invoicePreviewLoading","renderNow","name","type","list","required","ui","component","group","enabled","templateString","orderCode","serverPath","getServerLocation","ngOnInit","_this","_asyncToGenerator","query","getConfigQuery","mapStream","d","invoiceConfig","subscribe","config","controls","setValue","save","_this2","dirty","formValue","value","result$","mutate","upsertConfigMutation","input","upsertInvoiceConfig","result","firstValueFrom","source","hasConfig","Promise","resolve","reject","subscriber","SafeSubscriber","next","unsubscribe","error","complete","defaultValue","EmptyError","markAsPristine","markForCheck","success","entity","testDownload","_this3","template","res","fetch","headers","getHeaders","method","body","JSON","stringify","ok","json","Error","message","blob","downloadBlob","err","console","channelToken","authToken","authorization","fileName","openInNewTab","blobUrl","window","URL","createObjectURL","a","document","createElement","appendChild","setAttribute","href","download","click","static","t","i1","i2","core","VBU","selectors","decls","vars","consts","rf","ctx","InvoicesComponent_vdr_dynamic_form_input_14_Template","invalid","tmp_0_0","pristine","InvoicesModule","$C","G2t","SharedModule","RouterModule","forChild","path","pathMatch","data","breadcrumb"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/extensions/0052dbfc40620974fc22fe104b5b621840e0c85e6ee64034d3d99433c9aed439/invoices.component.ts","../node_modules/rxjs/dist/esm/internal/firstValueFrom.js","./src/extensions/0052dbfc40620974fc22fe104b5b621840e0c85e6ee64034d3d99433c9aed439/invoices.module.ts"],"sourcesContent":["import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  DataService,\n  getServerLocation,\n  LocalStorageService,\n  NotificationService,\n} from '@vendure/admin-ui/core';\nimport { getConfigQuery, upsertConfigMutation } from './queries.graphql';\nimport {\n  InvoiceConfigQuery,\n  UpsertInvoiceConfigMutation,\n  UpsertInvoiceConfigMutationVariables,\n} from './generated/graphql';\nimport { firstValueFrom } from 'rxjs';\nimport { ConfigArgDefinition } from '@vendure/common/lib/generated-types';\n\n@Component({\n  selector: 'invoices-component',\n  template: `\n    <div class=\"page-block\">\n      <vdr-page-block>\n        <vdr-action-bar>\n          <vdr-ab-right>\n            <button\n              class=\"btn btn-primary\"\n              (click)=\"save()\"\n              [disabled]=\"form.invalid || form.get('templateString')?.pristine\"\n            >\n              {{ 'common.update' | translate }}\n            </button>\n          </vdr-ab-right>\n        </vdr-action-bar>\n      </vdr-page-block>\n      <vdr-page-block>\n        <vdr-card>\n          <form class=\"form\" [formGroup]=\"form\">\n            <vdr-form-field label=\"Generate invoices on\" for=\"enabled\">\n              <clr-checkbox-wrapper>\n                <input type=\"checkbox\" clrCheckbox formControlName=\"enabled\" />\n              </clr-checkbox-wrapper>\n            </vdr-form-field>\n            <vdr-form-field label=\"HTML template\" for=\"templateString\">\n              <vdr-dynamic-form-input\n                *ngIf=\"renderNow\"\n                formControlName=\"templateString\"\n                [readonly]=\"false\"\n                [def]=\"htmlFormInputConfigArgsDef\"\n                [control]=\"form.get('templateString')\"\n                style=\"max-width: 100%;\"\n              >\n              </vdr-dynamic-form-input>\n            </vdr-form-field>\n            <vdr-form-field label=\"Order Code\" for=\"enabled\">\n              <clr-input-container>\n                <input type=\"text\" clrInput formControlName=\"orderCode\" />\n              </clr-input-container>\n            </vdr-form-field>\n            <button\n              class=\"btn btn-primary preview-button\"\n              (click)=\"testDownload()\"\n              [disabled]=\"invoicePreviewLoading\"\n            >\n              Preview Template\n            </button>\n          </form>\n        </vdr-card>\n      </vdr-page-block>\n    </div>\n  `,\n  styleUrls: ['./invoices.component.scss'],\n})\nexport class InvoicesComponent implements OnInit {\n  form: FormGroup;\n  serverPath: string;\n  invoicePreviewLoading: boolean = false;\n  renderNow = false;\n  htmlFormInputConfigArgsDef: ConfigArgDefinition = {\n    name: 'templateString',\n    type: 'text',\n    list: false,\n    required: false,\n    ui: { component: 'html-editor-form-input' },\n  };\n\n  constructor(\n    private formBuilder: FormBuilder,\n    protected dataService: DataService,\n    private changeDetector: ChangeDetectorRef,\n    private notificationService: NotificationService,\n    private localStorageService: LocalStorageService\n  ) {\n    this.form = this.formBuilder.group({\n      enabled: ['enabled'],\n      templateString: ['templateString'],\n      orderCode: [''],\n    });\n    this.serverPath = getServerLocation();\n  }\n\n  async ngOnInit(): Promise<void> {\n    this.dataService\n      .query<InvoiceConfigQuery>(getConfigQuery)\n      .mapStream((d) => d.invoiceConfig)\n      .subscribe((config) => {\n        this.form.controls['enabled'].setValue(config?.enabled);\n        this.renderNow = true;\n        this.form.controls['templateString'].setValue(config?.templateString);\n      });\n  }\n\n  async save() {\n    try {\n      if (this.form.dirty) {\n        const formValue = this.form.value;\n        const result$ = await this.dataService.mutate<\n          UpsertInvoiceConfigMutation,\n          UpsertInvoiceConfigMutationVariables\n        >(upsertConfigMutation, {\n          input: {\n            enabled: formValue.enabled,\n            templateString: formValue.templateString,\n          },\n        });\n        const { upsertInvoiceConfig: result } = await firstValueFrom(result$);\n        this.form.controls['enabled'].setValue(result.enabled);\n        this.form.controls['templateString'].setValue(result.templateString);\n      }\n      this.form.markAsPristine();\n      this.changeDetector.markForCheck();\n      this.notificationService.success('common.notify-update-success', {\n        entity: 'InvoiceConfig',\n      });\n    } catch (e: any) {\n      this.notificationService.error('common.notify-update-error', {\n        entity: 'InvoiceConfig',\n      });\n    }\n  }\n\n  async testDownload() {\n    try {\n      const template = this.form.value.templateString;\n      const orderCode = this.form.value.orderCode;\n      this.invoicePreviewLoading = true;\n      this.changeDetector.markForCheck();\n      const res = await fetch(\n        `${this.serverPath}/invoices/preview/${orderCode}`,\n        {\n          headers: {\n            ...this.getHeaders(),\n            'Content-Type': 'application/json',\n          },\n          method: 'POST',\n          body: JSON.stringify({ template }),\n        }\n      );\n      if (!res.ok) {\n        const json = await res.json();\n        throw Error(json?.message);\n      }\n      const blob = await res.blob();\n      await this.downloadBlob(blob, 'test-invoice.pdf', true);\n    } catch (err: any) {\n      console.error(err);\n      this.notificationService.error(err?.message);\n    }\n    this.invoicePreviewLoading = false;\n    this.changeDetector.markForCheck();\n  }\n\n  private getHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n    const channelToken = this.localStorageService.get('activeChannelToken');\n    if (channelToken) {\n      headers['vendure-token'] = channelToken;\n    }\n    const authToken = this.localStorageService.get('authToken');\n    if (authToken) {\n      headers.authorization = `Bearer ${authToken}`;\n    }\n    return headers;\n  }\n\n  private async downloadBlob(\n    blob: Blob,\n    fileName: string,\n    openInNewTab = false\n  ): Promise<void> {\n    const blobUrl = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.setAttribute('hidden', 'true');\n    a.href = blobUrl;\n    if (!openInNewTab) {\n      a.download = fileName;\n    }\n    a.setAttribute('target', '_blank');\n    a.click();\n  }\n}\n","import { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\nexport function firstValueFrom(source, config) {\n    const hasConfig = typeof config === 'object';\n    return new Promise((resolve, reject) => {\n        const subscriber = new SafeSubscriber({\n            next: (value) => {\n                resolve(value);\n                subscriber.unsubscribe();\n            },\n            error: reject,\n            complete: () => {\n                if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n        source.subscribe(subscriber);\n    });\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '@vendure/admin-ui/core';\nimport { InvoicesComponent } from './invoices.component';\nimport { InvoiceDetailViewComponent } from './invoices-detail-view/invoices-detail-view.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        pathMatch: 'full',\n        component: InvoicesComponent,\n        data: { breadcrumb: 'Invoices' },\n      },\n    ]),\n  ],\n  providers: [],\n  declarations: [InvoicesComponent, InvoiceDetailViewComponent],\n})\nexport class InvoicesModule {}\n"],"x_google_ignoreList":[1]}